import telebot
import logging
import os
from config import Config
from quotes import QuoteManager
from music import MusicManager
from photos import PhotoManager
from tiktok import TikTokManager
from telebot import types


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# Initialize bot
bot = telebot.TeleBot(Config.BOT_TOKEN)

# Initialize managers
quote_manager = QuoteManager(bot)
music_manager = MusicManager(bot)
photo_manager = PhotoManager(bot)
tiktok_manager = TikTokManager(bot)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """
ü§ñ *PororokzBot* ‚Äî –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç

üìù *–¶–∏—Ç–∞—Ç—ã:*
/quote, /q ‚Äî –°–æ–∑–¥–∞—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç–∏–ø 1)
/quote2, /q2 ‚Äî –°–æ–∑–¥–∞—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç–∏–ø 2, —Å emoji)
/my_quote \\[–Ω–æ–º–µ—Ä\\], /m_q \\[–Ω–æ–º–µ—Ä\\] ‚Äî –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞
/her_quote \\[–Ω–æ–º–µ—Ä\\], /h_q \\[–Ω–æ–º–µ—Ä\\] ‚Äî –¶–∏—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç)
/chat_quote \\[–Ω–æ–º–µ—Ä\\], /c_q \\[–Ω–æ–º–µ—Ä\\] ‚Äî –¶–∏—Ç–∞—Ç–∞ –∏–∑ —á–∞—Ç–∞
/mchat_quote \\[–Ω–æ–º–µ—Ä\\], /mc_q \\[–Ω–æ–º–µ—Ä\\] ‚Äî –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –∏–∑ —á–∞—Ç–∞
/all_quote ‚Äî –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
/delete_quote ID, /d_q ID ‚Äî –£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É

üéµ *–ú—É–∑—ã–∫–∞:*
/myz –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –ù–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É

üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:*
/save_photo, /save_scan ‚Äî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ (–æ—Ç–≤–µ—Ç)
/photos, /scans ‚Äî –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ

üì± *TikTok:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok-–≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
/tiktok ‚Äî –°–ª—É—á–∞–π–Ω–æ–µ TikTok –≤–∏–¥–µ–æ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @PororokzBot –≤ inline-—Ä–µ–∂–∏–º–µ –¥–ª—è —Ü–∏—Ç–∞—Ç –∏ —Ñ–æ—Ç–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ!
"""

    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É"
    add_group_btn = types.InlineKeyboardMarkup()
    add_group_btn.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{bot.get_me().username}?startgroup=true")
    )

    bot.reply_to(message, welcome_text, reply_markup=add_group_btn)

# Quote commands
@bot.message_handler(commands=['quote', 'q'])
def handle_quote(message):
    quote_manager.handle_quote_command(message, quote_type=1)

@bot.message_handler(commands=['quote2', 'q2'])
def handle_quote2(message):
    quote_manager.handle_quote_command(message, quote_type=2)

@bot.message_handler(commands=['my_quote', 'm_q'])
def handle_my_quote(message):
    try:
        parts = message.text.split()
        quote_number = int(parts[1]) if len(parts) > 1 else None
        quote_manager.handle_my_quote(message, quote_number)
    except (ValueError, IndexError):
        quote_manager.handle_my_quote(message)

    
@bot.callback_query_handler(func=lambda call: call.data.startswith("music_choose_"))
def handle_music_choice(call):
    callback_id = call.data
    data = music_manager._search_cache.get(callback_id)

    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ë“±–ª —Å—ñ–ª—Ç–µ–º–µ –µ—Å–∫—ñ—Ä–≥–µ–Ω.")
        return

    info = data['info']
    music_manager.download_from_info(call.message, info)

    
 
@bot.message_handler(commands=['her_quote', 'h_q'])
def handle_her_quote(message):
    # This would be similar to my_quote but for the replied user
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return
    # Implementation would be similar to my_quote
    bot.reply_to(message, "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@bot.message_handler(commands=['chat_quote', 'c_q'])
def handle_chat_quote(message):
    try:
        parts = message.text.split()
        quote_number = int(parts[1]) if len(parts) > 1 else None
        quote_manager.handle_chat_quote(message, quote_number)
    except (ValueError, IndexError):
        quote_manager.handle_chat_quote(message)

@bot.message_handler(commands=['mchat_quote', 'mc_q'])
def handle_mchat_quote(message):
    # User's quotes from current chat
    bot.reply_to(message, "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@bot.message_handler(commands=['all_quote'])
def handle_all_quote(message):
    quote_manager.handle_all_quote(message)

@bot.message_handler(commands=['delete_quote', 'd_q'])
def handle_delete_quote_cmd(message):
    try:
        parts = message.text.split()
        if len(parts) > 1:
            quote_id = int(parts[1])
            # This would call quote_manager.handle_delete_quote with proper parameters
            bot.reply_to(message, "üöß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥ —Ü–∏—Ç–∞—Ç–æ–π!")
        else:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ü–∏—Ç–∞—Ç—ã!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ü–∏—Ç–∞—Ç—ã!")

# Music commands
@bot.message_handler(commands=['myz'])
def handle_music_search(message):
    query = message.text[len('/myz'):].strip()
    if not query:
        bot.reply_to(message, "‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞. –ü—Ä–∏–º–µ—Ä: `/myz –ª–∏–±–æ –ú—É–∑ Shape of You`", parse_mode="Markdown")
        return
    music_manager.search_music_list(message, query)
    
@bot.message_handler(func=lambda message: message.text.lower().startswith('–º—É–∑ '))
def handle_myz_text(message):
    query = message.text[4:].strip()  # "–ú—É–∑ " —Å”©–∑—ñ–Ω–µ–Ω –∫–µ–π—ñ–Ω –±”ô—Ä—ñ
    if not query:
        bot.reply_to(message, "üéµ “ö–∞–Ω–¥–∞–π ”ô–Ω –∫–µ—Ä–µ–∫ –µ–∫–µ–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑. –ú—ã—Å–∞–ª—ã: `–ú—É–∑ –ï—Ä–∫–µ –ï—Å–º–∞—Ö–∞–Ω`", parse_mode='Markdown')
        return
    music_manager.show_music_options(message, query)


# Photo commands
@bot.message_handler(commands=['save_photo', 'save_scan'])
def handle_save_photo(message):
    photo_manager.save_photo(message)

@bot.message_handler(commands=['photos', 'scans'])
def handle_show_photos(message):
    photo_manager.show_user_photos(message)

# TikTok commands
@bot.message_handler(commands=['tiktok'])
def handle_random_tiktok(message):
    tiktok_manager.get_random_tiktok(message)

# Handle TikTok URLs in messages
@bot.message_handler(func=lambda message: tiktok_manager.is_tiktok_url(message.text or ''))
def handle_tiktok_url(message):
    url = tiktok_manager.extract_tiktok_url(message.text)
    if url:
        tiktok_manager.download_tiktok_video(message, url)

# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        if call.data.startswith('delete_quote_'):
            quote_manager.handle_delete_quote(call)
        elif call.data.startswith('delete_photo_'):
            photo_manager.handle_delete_photo(call)
        elif call.data.startswith('download_'):
            tiktok_manager.handle_download_callback(call)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
            
    except Exception as e:
        logging.error(f"Error handling callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

# Inline query handler (for accessing quotes and photos from any chat)
@bot.inline_handler(lambda query: query.query.lower().startswith('—Ü–∏—Ç–∞—Ç—ã') or query.query.lower() == '')
def handle_inline_quotes(query):
    try:
        from telebot.types import InlineQueryResultArticle, InputTextMessageContent
        
        user_quotes = quote_manager.db.get_user_quotes(query.from_user.id, limit=50)
        
        results = []
        for i, quote in enumerate(user_quotes[:10]):  # Limit to 10 results
            quote_text = quote_manager.format_quote_from_db(quote)
            
            result = InlineQueryResultArticle(
                id=str(quote[0]),
                title=f"–¶–∏—Ç–∞—Ç–∞ #{quote[0]}",
                description=quote[3][:100] + "..." if len(quote[3]) > 100 else quote[3],
                input_message_content=InputTextMessageContent(quote_text)
            )
            results.append(result)
        
        if not results:
            result = InlineQueryResultArticle(
                id='no_quotes',
                title="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç",
                description="–°–æ–∑–¥–∞–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –≤ —á–∞—Ç–∞—Ö —Å –±–æ—Ç–æ–º",
                input_message_content=InputTextMessageContent("üìù –£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç!")
            )
            results.append(result)
        
        bot.answer_inline_query(query.id, results, cache_time=60)
        
    except Exception as e:
        logging.error(f"Error handling inline query: {e}")

@bot.inline_handler(lambda query: query.query.lower().startswith('photos'))
def handle_inline_photos(query):
    try:
        from telebot.types import InlineQueryResultPhoto
        
        user_photos = photo_manager.db.get_user_photos(query.from_user.id)
        
        results = []
        for photo in user_photos[:10]:  # Limit to 10 results
            result = InlineQueryResultPhoto(
                id=str(photo[0]),
                photo_url=f"https://api.telegram.org/file/bot{Config.BOT_TOKEN}/{photo[1]}",
                thumb_url=f"https://api.telegram.org/file/bot{Config.BOT_TOKEN}/{photo[1]}",
                caption=photo[2] if photo[2] else f"–§–æ—Ç–æ #{photo[0]}"
            )
            results.append(result)
        
        bot.answer_inline_query(query.id, results, cache_time=60)
        
    except Exception as e:
        logging.error(f"Error handling inline photos: {e}")

if __name__ == '__main__':
    logging.info("Starting PororokzBot...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"Bot error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
        print("2. –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π")
        print("3. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
